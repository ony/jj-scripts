#!/usr/bin/env bash

jj-resolve-cid() {
  [[ $# == 1 ]]
  jj --no-pager log --no-graph --template change_id --revisions "$1"
}

jj-resolve-commit() {
  [[ $# == 1 ]]
  jj --no-pager log --no-graph --template commit_id --revisions "$1"
}

msg() {
  echo "$*" >&2
}

fail() {
  msg "$*"
  exit 1
}

# Let's assume next state after git amend. Though, not sure C′ is possible with just amend.
#
#  C  C′
#  │  │
#  A‥‥A′
#  │ ╱
#  B
#
# Idea to fix:
#
# 1. Backout old A on top of A′ (-A)
#
#  C -A  C′
#  │⋰ │ ╱
#  A  A′
#  │ ╱
#  B
#
# 2. Squash -A into A′ which results in diff between A and A′ likely conflicting.
#
#  C  C*
#  │  │
#  A  A*
#  │ ╱
#  B
#
# 3. Rebase that to A which resolves conflict
#
#     C*
#     │
#  C  A*
#   ╲ │ ⋱
#     A  A*
#     │ ╱
#     B
#
# 4. Squash it into A
#
#  C  C′
#   ╲ │
#     A′
#     │
#     B
#
# Note that C′ will get new Git hash after this manipulations. Hence, we
# write scenario first with resolved JJ change id before doing any changes.

sync-amend() {
  local old_hash new_hash rest
  local old_cid new_cid
  local script
  script=$(
    while read -r old_hash new_hash rest; do
      old_cid=$(jj-resolve-cid "$old_hash")  # A
      new_cid=$(jj-resolve-cid "$new_hash")  # A'
      if [[ "$old_cid" == "$new_cid" ]]; then
        cat <<EOS
# $old_hash $new_hash $rest
# note that old commit hash might have changed by moment of executing this section
# but new one supposed to be the same as it diverged from history branches
updated_old_hash=\$(jj-resolve-commit "$old_cid ~ $new_hash")

jj revert --revisions \$updated_old_hash --destination \$updated_old_hash

# Squashing -A into A' preserving original commit message.
# Leaving new A* have only commit message and changes without A.

a_star=\$(jj-resolve-cid "\$updated_old_hash"'+ & description(regex:"(back|revert).* commit '"\$updated_old_hash"'")')

jj rebase --source $new_hash --destination "\$a_star" --keep-divergent
jj desc --message "" "\$a_star"
EDITOR=true jj squash --revision "\$a_star+"
jj desc --message "" "\$a_star-"
EDITOR=true jj squash --revision "\$a_star"
EOS
      else
        cat <<EOS
# $old_hash $new_hash $rest
# note that commit hash might have changed by moment of executing this section
updated_old_hash=\$(jj-resolve-commit $old_cid)

jj backout --revisions $old_cid --destination $new_cid

# Squashing -A into A' preserving original commit message.
# Leaving new A* have only commit message and changes without A.

a_star=\$(jj-resolve-cid '$new_cid+ & description(regex:"(back|revert).* commit '"\$updated_old_hash"'")')

jj squash --use-destination-message --revision "\$a_star"

# Move A* tree on top of original A and squash it overwriting commit message
jj rebase --source $new_cid --destination $old_cid
jj describe --message '' $old_cid # truncate old message in favor of new one
EDITOR="true" \
  jj squash --revision $new_cid
EOS
      fi
    done) || return $?
  (set -eo pipefail; eval "$script")
}

apply-workarounds() {
  # work-around for https://github.com/jj-vcs/jj/issues/6437
  # As per https://git-scm.com/docs/githooks hooks supposed to start from
  # work-tree or repo dir in case of bare. So next should always be true.
  if [[ "$(realpath --relative-to=. "${GIT_WORK_TREE:-.}")" == "." ]]; then
    unset GIT_WORK_TREE
  fi
}

set -exo pipefail

case "$1" in
amend)
  if [[ -r ".git/rebase-merge/git-rebase-todo" ]] \
    || [[ -r "rebase-merge/git-rebase-todo" ]]; then
    fail "No support for $1 during rebase"
  else
    (
      apply-workarounds
      "sync-$1"
    )
  fi
  ;;
*) fail "Unsupported event $1" ;;
esac

